// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coder/coder-xray/jfrog (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination ./mock.go -package jfrog github.com/coder/coder-xray/jfrog Client
//

// Package jfrog is a generated GoMock package.
package jfrog

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ResultsURL mocks base method.
func (m *MockClient) ResultsURL(arg0 Image, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResultsURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// ResultsURL indicates an expected call of ResultsURL.
func (mr *MockClientMockRecorder) ResultsURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResultsURL", reflect.TypeOf((*MockClient)(nil).ResultsURL), arg0, arg1)
}

// ScanResults mocks base method.
func (m *MockClient) ScanResults(arg0 Image) (ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanResults", arg0)
	ret0, _ := ret[0].(ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanResults indicates an expected call of ScanResults.
func (mr *MockClientMockRecorder) ScanResults(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanResults", reflect.TypeOf((*MockClient)(nil).ScanResults), arg0)
}
